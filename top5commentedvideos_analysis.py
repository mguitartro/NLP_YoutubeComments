# -*- coding: utf-8 -*-
"""Top5CommentedVideos-Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ivRpxpChiTM4zFJQ5RJdQwaQm9oXkOvc
"""

import pandas as pd

# Leer el archivo CSV proporcionado
file_path = "/content/VideoComments.csv"
df = pd.read_csv(file_path, encoding='utf-8')

# Mostrar las primeras filas del dataset
df.head(), df.info()

# Identificar los 5 VideoID con mas comentarios
top_videos = df['VideoID'].value_counts().head(5).index.tolist()

# Filtrar los comentarios de los 5 videos mas comentados
top_videos_df = df[df['VideoID'].isin(top_videos)]

# Verificar el numero de comentarios por VideoID
top_videos_df['VideoID'].value_counts()

from transformers import pipeline
import re

# Configurar el modelo de analisis de sentimientos
sentiment_analyzer = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")

# Funcion para limpiar el texto
def clean_text(text):
    text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)  # Hipervínculos
    text = re.sub(r'[^a-zA-ZáéíóúñÁÉÍÓÚÑ\s]', '', text)  # Caracteres especiales y emojis
    stopwords = set([
        "a", "ante", "bajo", "cabe", "con", "contra", "de", "desde", "durante", "en", "entre", "hacia", "hasta",
        "mediante", "para", "por", "según", "sin", "so", "sobre", "tras", "y", "o", "u", "el", "la", "los", "las",
        "un", "una", "unos", "unas", "es", "muy", "me", "te", "se", "lo", "que"
    ])
    return ' '.join(word for word in text.split() if word.lower() not in stopwords).strip()

# Limpiar los comentarios
top_videos_df['Comentario_Limpio'] = top_videos_df['Comentario'].apply(clean_text)

# Realizar analisis de sentimientos en lotes
def analyze_sentiments_in_batches(comments, batch_size=500):
    sentiments = []
    for i in range(0, len(comments), batch_size):
        batch = comments[i:i + batch_size]
        results = sentiment_analyzer(batch)
        for result in results:
            label = result['label']
            if "1 star" in label or "2 stars" in label:
                sentiments.append('Negative')
            elif "3 stars" in label:
                sentiments.append('Neutral')
            else:
                sentiments.append('Positive')
    return sentiments

# Analizar los comentarios de los videos mas comentados
top_videos_df['Sentiment'] = analyze_sentiments_in_batches(top_videos_df['Comentario_Limpio'].tolist())

# Contar los sentimientos por VideoID
sentiment_summary = top_videos_df.groupby(['VideoID', 'Sentiment']).size().unstack(fill_value=0)
sentiment_summary

import matplotlib.pyplot as plt

# Crear un grafico de barras que muestre la cantidad de comentarios positivos, negativos y neutrales por video
sentiment_summary = sentiment_summary.reset_index()  # Resetear el indice para tener VideoID como columna

# Configurar el grafico de barras
plt.figure(figsize=(10, 6))

# Graficar los valores
sentiment_summary.plot(kind='bar', stacked=False, color=['#2ca02c', '#d62728', '#ff7f0e'], ax=plt.gca())

# Añadir etiquetas y titulo
plt.title('Distribución de Sentimientos por Video', fontsize=14)
plt.xlabel('VideoID', fontsize=12)
plt.ylabel('Número de Comentarios', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.legend(title='Sentiment', labels=['Positive', 'Negative', 'Neutral'])

# Mostrar el grafico
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))

# Graficar los valores
sentiment_summary.plot(kind='bar', stacked=False, color=['#ff7f0e', '#2ca02c', '#d62728'], ax=plt.gca())

# Añadir etiquetas y titulo
plt.title('Distribución de Sentimientos por Video', fontsize=14)
plt.xlabel('VideoID', fontsize=12)
plt.ylabel('Número de Comentarios', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.legend(title='Sentiment', labels=['Neutral', 'Positive', 'Negative'])

# Mostrar el grafico
plt.tight_layout()
plt.show()

import pandas as pd

# Crear un DataFrame con los datos relevantes
output_df = top_videos_df[['VideoID', 'Comentario', 'Sentiment']]

# Guardar el DataFrame en un archivo Excel
output_file = "sentimientos_videos.xlsx"
output_df.to_excel(output_file, index=False)

print(f"Archivo guardado exitosamente como '{output_file}'.")